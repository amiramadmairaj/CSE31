**TPS 1**

1. Open MemCast.c, compile and run the program. What do you expect the program to print? (%x in printf allows an integer to be printed in Hex format).
I expect a hex number of 2 to be printed (02)

2. Before changing the code, what do you expect the program to print if you print four_ints[0] again at the end of the program?
I expect the program to print "2" again.

3. Insert a print statement to output four_ints[0] at the end of the program and verify your answer from (2).
I was wrong, the program printed "44434241" or 'A' in Hexidecimal

4. Now add a print statement to the program so it will print out four_ints[1]. What does it print? Are you surprised (or lost) by the results?
I am really confused how four_ints[0]'s value was changed at the end of the program but not four_ints[1]

5. Let us study the code carefully and investigate what happened. No, the memory did not go crazy.

a. How many array(s) were allocated in this program?
One array

b. Are four_ints and four_c pointing to the same location?
Yes, both point to "(char*)four_ints"

c. Verify your answer of (b) by printing out the values of four_ints and four_c.
Done. 

6. Write a loop to print out the addresses and values (in Hex) of all the elements of four_ints. What is the difference in addresses between two consecutive elements? Discuss what this difference means.
The difference between two consecutive elements is four, which corrisponds to the size of each int.

7. Use a piece of paper to draw the layout of the array horizontally so that the smallest address begins from the RIGHT-hand-side. Indicate the address and value of each element based on the results of (6). You can draw it digitally.
Done. (PDF provided in submission)

8. Now, write a loop to print out the same information for four_c as you did in (6). What is the difference in addresses between two consecutive elements? Discuss what this difference means.
The difference between two consecutive elements is only one (ie.  0x7ffee4120a20 and 0x7ffee4120a21) which is the size of a char.

9. Use the same piece of paper (or file) from (7) to draw a similar structure for four_c.
Done. (PDF provided in submission)

10. By comparing the layout of the array pointed by the two pointers, what do you observe in terms of how C accesses memory when the index of an array is incremented?
C accesses memory depending on the size of the type that the array was declared as (ie. char= 1 memory address apart; int= 4 memeory address apart)

**TPS 2**

1. Open Array2D.c. This program will create a n x n array of int. Explain what line #8 does.
Line 8 creates a 2D array with the use of the double pointer ((int**))

2. Since every array must be allocated in the memory before it can be used, we need to allocate the rows
one by one. To do this, we need to be able to access the pointers from the first array (pointed by arr).
Assuming i is the index of that array, how do we access the ith value of the array?
*(*(arr + i) + j)

We would iterate the array with a forloop to access the ith value of the array.

3. Without using array notations ([]), insert code to complete allocating all the rows and initialize all
contents to be 0. Your code should work with different values for n. Hint: if j is the index of each
row, how do you access arr[i][j] in pointer notation?
for(i=0;i<n;i++){
	*(arr+i)=(int*)malloc(n * sizeof(int));
	}
	for(j=0; j<n; j++){
	*(*(arr + i) + j)= 0;
	}

4. To verify whether you have created your array correctly, we need a function to print out the array. The
function printArray has been declared. It takes in both the array to be printed and size of array. Why
do we need to pass the size as an argument?
We need to pass the size as an argument because in order to know how far to iterate the for loop, since C does not keep track of size.

5. Complete printArray so it prints out the content and layout of an array correctly.
Done. 

6. Now, let us modify the content of the array. Insert code to make the array into a diagonal matrix that
looks like the following (again, do not limit the size to 5):
Done. 